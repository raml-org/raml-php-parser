#%RAML 0.8

# Example event logging API as described in InfoQ article in March 2014.

title: Eventlog API
version: 1.0
baseUri: http://eventlog.example.org/{version}

schemas:
  - eventJson: !include eventSchema.json
    eventListJson: !include eventListSchema.json

securitySchemes:
  oauth_2:
      description: Eventlog uses OAuth2 security scheme only.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            type: string
            description: A valid OAuth 2 access token.
        responses:
          401:
            description: Bad or expired token.
          403:
            description: Bad OAuth request.
      settings:
        authorizationUri: http://eventlog.example.org/oauth2/authorize
        accessTokenUri: http://eventlog.example.org/oauth2/token
        authorizationGrants: [ credentials ]


resourceTypes:
  - collection:
      post:
        description: Post a new entity into a collection.
        responses:
          201:
            headers:
              location:
                type: string
                example: /streams/temperatures/12345
            body:

traits:
  slidingwindow:
    description: Query parameters related to retrieving a sliding window of timestamped entities relative to now.
    queryParameters:
      windowstart:
        description: The begining of the sliding window expressed as a time interval from now represented as an integer concatenated with units h (hours), m (minutes), s (seconds) or ms (milliseconds).
        type: string
        example: 1h, 30m, 86164s
      windowsize:
        description: The end of the sliding window expressed as a time interval from the start as a concatenated integer and unit suffix.
        type: string
        example: 10s, 1h, 25m
  paginated:
    queryParameters:
      pagenumber:
        description: The page number of the result-set to return.
        type: integer
        minimum: 0
      pagesize:
        description: The number of rows in a page request.
        type: integer
        maximum: 100
  limited:
    queryParameters:
      limit:
        description: A general limit on the number of rows to return in any request.
        type: integer
        default: 100


/streams/{streamName}:
  type: collection
  displayName: A Named Stream
  description: A stream is a collection of related events. A Named Stream has been defined by the user to contain a list of related events. Named Streams are created by POSTing an Event to a Named Stream.
  post:
    securedBy: [ oauth_2 ]
    description: Create a new event in this stream.
    body:
      application/json:
        schema: eventJson
        example: |
                { "name": "Temperature Measurement",
                  "source": "Therometer",
                  "sourceTime": "2014-01-01T16:56:54+11:00",
                  "entityRef": "http://example.org/thermometers/99981",
                  "context": {
                    "value": "37.7",
                    "units": "Celsius"
                  }
                }
  get:
    is: [ slidingwindow, paginated, limited ]
    description: Get a list of events in this stream.
    responses:
      404:
        description: The specified stream could not be found.
      200:
        description: Returns a list of events.
        body:
          application/json:
            schema: eventListJson
            example: !include eventListExample.json
  /{eventId}:
   get:
    description: Get a particular Event by its Id.
    responses:
     200:
      description: Returns the requested event.
      body:
       application/json:
        schema: eventJson
        example: !include eventExample.json

